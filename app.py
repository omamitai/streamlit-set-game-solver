import streamlit as st
import numpy as np
import cv2
from PIL import Image
import io
import time

# Set page configuration
st.set_page_config(
    page_title="SET Detector",
    page_icon="üé¥",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS for a modern look
st.markdown("""
<style>
    /* Main background and text colors */
    .stApp {
        background-color: #f8f9fa;
        color: #212529;
    }
    
    /* Header styling */
    h1, h2, h3 {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        color: #6200EA;
    }
    
    /* Card styling */
    .css-1r6slb0 {
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        background-color: white;
        padding: 1.5rem;
        margin-bottom: 1rem;
    }
    
    /* Button styling */
    .stButton>button {
        background-color: #6200EA;
        color: white;
        border-radius: 8px;
        border: none;
        padding: 0.5rem 1rem;
        font-weight: 600;
        transition: all 0.3s ease;
    }
    
    .stButton>button:hover {
        background-color: #3700B3;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        transform: translateY(-2px);
    }
    
    /* File uploader styling */
    .uploadedFile {
        border: 2px dashed #3700B3;
        border-radius: 8px;
        padding: 1rem;
    }
    
    /* Progress bar styling */
    .stProgress > div > div {
        background-color: #6200EA;
    }
    
    /* Containers with shadows */
    .shadow-container {
        background-color: white;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        padding: 2rem;
        margin-bottom: 2rem;
    }
</style>
""", unsafe_allow_html=True)

# Sidebar configuration
with st.sidebar:
    st.image("https://upload.wikimedia.org/wikipedia/en/thumb/9/9d/SET_Box.jpg/220px-SET_Box.jpg", width=150)
    st.title("SET Detector")
    st.markdown("---")
    
    st.subheader("About")
    st.markdown("""
    This app detects SET cards in an image and highlights valid sets.
    
    A SET consists of three cards where each feature is either all the same or all different:
    - Color (red, green, purple)
    - Shape (oval, squiggle, diamond)
    - Number (one, two, three)
    - Shading (solid, striped, outlined)
    """)
    
    st.markdown("---")
    
    # Settings
    st.subheader("Settings")
    confidence = st.slider("Detection Confidence", min_value=0.5, max_value=1.0, value=0.75, step=0.05)
    highlight_color = st.color_picker("Highlight Color", "#FF5733")
    highlight_thickness = st.slider("Highlight Thickness", 1, 10, 3)
    
    st.markdown("---")
    
    # Credits
    st.caption("Developed with ‚ù§Ô∏è and Streamlit")

# Main app
st.markdown('<div class="shadow-container">', unsafe_allow_html=True)
st.title("SET Card Game Detector")
st.markdown("Upload an image of a SET game board to find all valid sets")
st.markdown('</div>', unsafe_allow_html=True)

# Image upload section
st.markdown('<div class="shadow-container">', unsafe_allow_html=True)
st.header("Upload Image")
uploaded_file = st.file_uploader("Choose an image of a SET game board", type=["jpg", "jpeg", "png"])
st.markdown('</div>', unsafe_allow_html=True)

# Mock functions for SET detection (in a real app, these would be replaced with actual CV models)
def detect_cards(image, confidence):
    """
    Mock function to detect SET cards in an image.
    In a real implementation, this would use computer vision models.
    
    Returns a list of detected cards with their positions.
    """
    # In a real implementation, this would use ML/CV to detect actual cards
    time.sleep(1)  # Simulate processing time
    
    # Simulate detecting cards (in a real app this would use CV/ML)
    height, width = image.shape[:2]
    detected_cards = []
    
    # Mock data - in reality would be generated by CV model
    num_cards = 12
    for i in range(num_cards):
        row = i // 4
        col = i % 4
        
        card_width = width // 4
        card_height = height // 3
        
        x = int(col * card_width + card_width * 0.1)
        y = int(row * card_height + card_height * 0.1)
        w = int(card_width * 0.8)
        h = int(card_height * 0.8)
        
        # Mock card attributes (color, shape, number, shading)
        # In reality, these would be detected by the CV model
        attributes = {
            "color": np.random.choice(["red", "green", "purple"]),
            "shape": np.random.choice(["oval", "squiggle", "diamond"]),
            "number": np.random.choice([1, 2, 3]),
            "shading": np.random.choice(["solid", "striped", "outline"])
        }
        
        detected_cards.append({
            "bbox": (x, y, w, h),
            "attributes": attributes,
            "confidence": np.random.uniform(confidence, 1.0)
        })
    
    return detected_cards

def find_sets(cards):
    """
    Find all valid sets among the detected cards.
    
    Returns a list of valid sets, where each set is a list of 3 card indices.
    """
    sets = []
    
    # In a real implementation, this would check all combinations of 3 cards
    # and verify if they form a valid set according to SET rules
    
    # For mock purposes, let's create some random sets
    num_sets = min(4, len(cards) // 3)
    for _ in range(num_sets):
        # Generate random sets for demonstration
        set_indices = np.random.choice(range(len(cards)), 3, replace=False)
        sets.append(set_indices.tolist())
    
    return sets

def highlight_sets(image, cards, sets, highlight_color, thickness):
    """
    Highlight the detected sets in the image.
    
    Returns the image with highlighted sets.
    """
    result_img = image.copy()
    
    # Convert the highlight color from hex to BGR
    highlight_color = highlight_color.lstrip('#')
    highlight_bgr = tuple(int(highlight_color[i:i+2], 16) for i in (4, 2, 0))
    
    # Draw a polygon connecting the three cards in each set
    for set_indices in sets:
        points = []
        for idx in set_indices:
            x, y, w, h = cards[idx]["bbox"]
            # Use the center of each card
            center_x = x + w // 2
            center_y = y + h // 2
            points.append((center_x, center_y))
            
            # Highlight each card in the set
            cv2.rectangle(result_img, (x, y), (x + w, y + h), highlight_bgr, thickness)
        
        # Connect the cards in the set
        for i in range(3):
            cv2.line(result_img, points[i], points[(i + 1) % 3], highlight_bgr, thickness)
    
    return result_img

# Processing when an image is uploaded
if uploaded_file is not None:
    # Load and display the original image
    st.markdown('<div class="shadow-container">', unsafe_allow_html=True)
    st.header("Original Image")
    
    # Convert the uploaded file to an image
    file_bytes = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)
    opencv_image = cv2.imdecode(file_bytes, cv2.IMREAD_COLOR)
    pil_image = Image.fromarray(cv2.cvtColor(opencv_image, cv2.COLOR_BGR2RGB))
    
    st.image(pil_image, caption="Uploaded SET Game Board", use_column_width=True)
    st.markdown('</div>', unsafe_allow_html=True)
    
    # Process button
    st.markdown('<div class="shadow-container">', unsafe_allow_html=True)
    process_button = st.button("Find SETs", key="process")
    
    if process_button:
        # Show progress
        progress_bar = st.progress(0)
        
        # Step 1: Detect cards
        st.subheader("Step 1: Detecting Cards")
        progress_bar.progress(25)
        cards = detect_cards(opencv_image, confidence)
        
        # Display detected cards info
        st.success(f"Found {len(cards)} cards")
        
        # Step 2: Find sets
        st.subheader("Step 2: Finding Sets")
        progress_bar.progress(50)
        sets = find_sets(cards)
        
        # Display sets info
        st.success(f"Found {len(sets)} valid sets")
        
        # Step 3: Highlight sets
        st.subheader("Step 3: Highlighting Sets")
        progress_bar.progress(75)
        result_image = highlight_sets(opencv_image, cards, sets, highlight_color, highlight_thickness)
        progress_bar.progress(100)
        
        # Convert result back to PIL for display
        result_pil = Image.fromarray(cv2.cvtColor(result_image, cv2.COLOR_BGR2RGB))
        
        # Display result
        st.header("Result")
        st.image(result_pil, caption="SET Game Board with Highlighted Sets", use_column_width=True)
        
        # Create a downloadable image
        buf = io.BytesIO()
        result_pil.save(buf, format="PNG")
        byte_im = buf.getvalue()
        
        st.download_button(
            label="Download Result",
            data=byte_im,
            file_name="set_result.png",
            mime="image/png"
        )
        
    st.markdown('</div>', unsafe_allow_html=True)
    
    # Sample cards explanation
    st.markdown('<div class="shadow-container">', unsafe_allow_html=True)
    st.header("How to Play SET")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("Example of a valid SET:")
        st.image("https://upload.wikimedia.org/wikipedia/commons/8/8f/Set-game-cards.png", width=300)
    
    with col2:
        st.subheader("SET Rules:")
        st.markdown("""
        A valid SET consists of three cards where each feature is either:
        - **ALL THE SAME** or
        - **ALL DIFFERENT**
        
        For each of the four features (color, shape, number, shading).
        """)
    
    st.markdown('</div>', unsafe_allow_html=True)

else:
    # Sample example when no image is uploaded
    st.markdown('<div class="shadow-container">', unsafe_allow_html=True)
    st.info("Please upload an image to get started")
    
    # Sample image
    st.subheader("Example Result")
    st.image("https://i.imgur.com/JGQJl6J.png", caption="Example of SET detection", use_column_width=True)
    st.markdown('</div>', unsafe_allow_html=True)

# Footer
st.markdown("""
<div style="text-align: center; margin-top: 3rem; padding: 1rem; background-color: #f1f3f5; border-radius: 8px;">
    <p style="margin-bottom: 0.5rem; color: #6c757d;">
        ¬© 2025 SET Detector App | <a href="https://en.wikipedia.org/wiki/Set_(card_game)" target="_blank">Learn more about SET</a>
    </p>
    <p style="color: #6c757d; font-size: 0.8rem;">
        This app is for educational purposes only. SET¬Æ is a registered trademark of Marsha J. Falco.
    </p>
</div>
""", unsafe_allow_html=True)
